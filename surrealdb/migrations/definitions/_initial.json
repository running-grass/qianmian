{"schemas":"-- 定义对象属性值\nDEFINE TABLE OVERWRITE entity_attributes SCHEMAFULL TYPE RELATION FROM entity TO attribute\n  PERMISSIONS FOR select, update, delete, create WHERE fn::get_current_workspace() == workspace\n  COMMENT \"对象属性值关系\";\nDEFINE FIELD OVERWRITE workspace ON TABLE entity_attributes TYPE record<workspace>\n  DEFAULT fn::get_current_workspace()\n  ASSERT record::exists($value)\n  COMMENT \"对象属性值所属工作空间\";\nDEFINE FIELD OVERWRITE data ON TABLE entity_attributes TYPE any\n  ASSERT fn::assert_attribute_type($this.out, $value)\n  COMMENT \"对象属性值\";\nDEFINE INDEX OVERWRITE entity_attributes_unique ON TABLE entity_attributes FIELDS in,out UNIQUE COMMENT \"对象属性值关系唯一索引\";\n\nDEFINE EVENT OVERWRITE trigger_entity_update ON TABLE entity_attributes\n    THEN (\n      UPDATE entity SET updated_at = time::now() WHERE id == $after.in || id == $before.in\n    )\n  COMMENT \"更新对象属性值时触发\";\n\n\n-- 断言属性值是否符合类型声明\nDEFINE FUNCTION OVERWRITE fn::assert_attribute_type($aid: record<attribute>, $value: any) {\n  IF ($value == null) {\n    RETURN true;\n  };\n\n  LET $attr = (SELECT * FROM $aid)[0];\n  IF (!$attr) {\n    THROW \"属性不存在\";\n  };\n\n  IF ($attr.type == \"object\") {\n    RETURN type::is::object($value);\n  } ELSE IF ($attr.type == \"boolean\") {\n    RETURN type::is::bool($value);\n  } ELSE IF ($attr.type == \"number\") {\n    RETURN type::is::number($value);\n  } ELSE IF ($attr.type == \"string\") {\n    RETURN type::is::string($value);\n  } ELSE IF ($attr.type == \"date\") {\n    RETURN type::is::datetime($value);\n  } ELSE IF ($attr.type == \"datetime\") {\n    RETURN type::is::datetime($value);\n  } ELSE IF ($attr.type == \"enum\") {\n    RETURN $value in $attr.enums;\n  } ELSE {\n    THROW \"不支持的类型声明[\" + <string>$attr.type + \"]\";\n  };\n} COMMENT \"断言属性值是否符合类型声明\" PERMISSIONS FULL;\n\nDEFINE FUNCTION OVERWRITE fn::update_attribute_data($naid: option<record<entity_attributes>>, $nid: record<entity>, $aid: record<attribute>, $data: any) {\n  IF (!type::is::none($naid)) {\n    UPDATE ONLY $naid MERGE { data: $data };\n    RETURN null;\n  };\n  LET $na = (SELECT * FROM ONLY entity_attributes WHERE in = $nid AND out = $aid LIMIT 1);\n\n  IF ($na) {\n    UPDATE ONLY $na.id MERGE { data: $data };\n  } ELSE {\n    RELATE $nid->entity_attributes->$aid CONTENT { data: $data };\n  };\n\n  RETURN null;\n\n} COMMENT \"更新属性值\" PERMISSIONS FULL;\n\n\n-- 定义对象关系\nDEFINE TABLE OVERWRITE entity_relations SCHEMAFULL TYPE RELATION FROM entity TO entity\n\tPERMISSIONS FOR select, update, delete, create WHERE fn::get_current_workspace() == workspace\n\tCOMMENT \"对象关系关系\";\nDEFINE FIELD OVERWRITE workspace ON TABLE entity_relations TYPE record<workspace>\n\tDEFAULT fn::get_current_workspace()\n\tASSERT record::exists($value)\n\tCOMMENT \"对象关系所属工作空间\";\nDEFINE FIELD OVERWRITE relation ON TABLE entity_relations TYPE record<relation>\n\tCOMMENT \"对象关系类型\";\nDEFINE INDEX OVERWRITE entity_relations_unique ON TABLE entity_relations FIELDS in,out,relation UNIQUE COMMENT \"同类型下对象关系关系唯一索引\";\n\nDEFINE EVENT OVERWRITE trigger_entity_update ON TABLE entity_relations\n\tTHEN (\n\t\tUPDATE entity SET updated_at = time::now() WHERE id == $after.in || id == $before.in || id == $after.out || id == $before.out\n\t)\n\tCOMMENT \"更新对象关系时触发\";\n\n-- 定义关系\nDEFINE TABLE OVERWRITE workspace_members SCHEMAFULL TYPE RELATION FROM workspace TO account\n\tPERMISSIONS\n\t\tFOR select WHERE out == $auth.id\n\t\t-- FOR create WHERE\n\t\t-- TODO 管理员才可以操作\n\t\tFOR update, delete, create WHERE false\n\tCOMMENT \"工作空间成员关系\";\nDEFINE FIELD OVERWRITE role ON TABLE workspace_members TYPE \"admin\" | \"member\"\n\tDEFAULT \"member\"\n\tCOMMENT \"工作空间成员角色\";\nDEFINE INDEX OVERWRITE workspace_members_unique ON TABLE workspace_members FIELDS in,out UNIQUE COMMENT \"工作空间成员关系唯一索引\";\n\n\nDEFINE TABLE OVERWRITE script_migration SCHEMAFULL\n    PERMISSIONS\n        FOR select FULL\n        FOR create, update, delete NONE;\n\nDEFINE FIELD OVERWRITE script_name ON script_migration TYPE string;\nDEFINE FIELD OVERWRITE executed_at ON script_migration TYPE datetime DEFAULT time::now() READONLY;\n\n-- 定义用户\nDEFINE TABLE OVERWRITE account SCHEMAFULL TYPE NORMAL\n  PERMISSIONS FOR select, update, delete, create\n\t\tWHERE id = $auth.id\n\tCOMMENT \"用户表\";\nDEFINE FIELD OVERWRITE username ON TABLE account TYPE string\n\tASSERT string::is::ascii($value) && string::len($value) >= 5\n\tCOMMENT \"用户名\";\n\nDEFINE FIELD OVERWRITE password ON TABLE account TYPE string PERMISSIONS NONE COMMENT \"密码\";\nDEFINE FIELD OVERWRITE config ON TABLE account FLEXIBLE TYPE object DEFAULT {} COMMENT \"用户配置\";\nDEFINE INDEX OVERWRITE username_uniq ON TABLE account FIELDS username UNIQUE COMMENT \"用户名唯一索引\";\n\nDEFINE EVENT OVERWRITE auto_create_workspace ON TABLE account\n\tWHEN $event = \"CREATE\"\n\tTHEN {\n\t\tLET $ws = (CREATE ONLY workspace CONTENT {\n\t\t\tslug: string::slug($after.username) + \"-\" +  rand::string(4),\n\t\t\tname: string::concat($after.username, \"'s workspace\")\n\t\t});\n\t\tUPDATE $after.id MERGE { config: { default_workspace: $ws.id,}, };\n\t\tRELATE ($ws.id)->workspace_members->($after.id) SET role = 'admin';\n\t}\n\tCOMMENT \"自动创建工作空间\";\n\n\nDEFINE ACCESS OVERWRITE front_user ON DATABASE TYPE RECORD\n\tSIGNUP {\n\t\tLET $exists = SELECT * FROM account WHERE username == $user;\n\t\tIF $exists {\n\t\t\tTHROW \"用户名已存在\";\n\t\t};\n\t\tLET $reg_user = (CREATE ONLY account CONTENT { username: $user, password: crypto::argon2::generate($pass), });\n\n\t\tRETURN $reg_user;\n\t}\n\tSIGNIN {\n\t\tLET $findedUser = SELECT * FROM ONLY account WHERE username == $user LIMIT 1;\n\t\tIF ($findedUser == NONE) {\n\t\t\tTHROW \"用户名不存在\";\n\t\t};\n\n\t\tIF (!crypto::argon2::compare($findedUser.password, $pass)) {\n\t\t\tTHROW \"密码错误\";\n\t\t};\n\n\t\tRETURN $findedUser;\n\t}\n\tDURATION FOR TOKEN 365d, FOR SESSION 24h\n\tAUTHENTICATE {\n\t\tLET $tokenRecord = fn::get_token_record();\n\t\tIF $tokenRecord.revoked = true {\n\t\t\t\tTHROW \"This token has been revoked\";\n\t\t};\n\n\t\tIF (record::exists($tokenRecord)) {\n\t\t\tUPDATE $tokenRecord MERGE {\n\t\t\t\tlast_ip: session::ip(), last_used: time::now()\n\t\t\t};\n\t\t} ELSE {\n\t\t\tINSERT INTO token { id: $token.jti, last_used: time::now() };\n\t\t};\n\n\t\tRETURN $auth;\n\t}\n;\n\n-- 定义对象属性\nDEFINE TABLE OVERWRITE attribute SCHEMAFULL TYPE NORMAL\n\tPERMISSIONS FOR select, update, delete, create WHERE fn::get_current_workspace() == workspace\n\tCOMMENT \"对象属性表\";\nDEFINE FIELD OVERWRITE workspace ON TABLE attribute TYPE record<workspace>\n\tREADONLY DEFAULT fn::get_current_workspace()\n\tASSERT record::exists($value) COMMENT \"对象属性所属工作空间\";\nDEFINE FIELD OVERWRITE slug ON TABLE attribute TYPE string ASSERT string::is::ascii($value) COMMENT \"对象属性标识\";\nDEFINE FIELD OVERWRITE name ON TABLE attribute TYPE string COMMENT \"对象属性名称\";\nDEFINE FIELD OVERWRITE description ON TABLE attribute TYPE string DEFAULT \"\" COMMENT \"对象属性描述\";\nDEFINE FIELD OVERWRITE type ON TABLE attribute\n\tTYPE \"object\" | \"string\" | \"number\" | \"boolean\" |  \"datetime\" | \"date\" | \"enum\"\n\tDEFAULT \"string\"\n\tCOMMENT \"对象属性类型\";\nDEFINE FIELD OVERWRITE enums ON TABLE attribute TYPE array<string> DEFAULT [] COMMENT \"对象属性枚举值\";\nDEFINE INDEX OVERWRITE slug_uniq ON TABLE attribute FIELDS workspace, slug UNIQUE;\n\n\n-- 定义对象\nDEFINE TABLE OVERWRITE entity SCHEMAFULL TYPE NORMAL\n\tPERMISSIONS FOR select, update, delete, create WHERE fn::get_current_workspace() == workspace\n\tCOMMENT \"对象表\";\nDEFINE FIELD OVERWRITE workspace ON TABLE entity TYPE record<workspace>\n\tREADONLY DEFAULT fn::get_current_workspace()\n\tASSERT record::exists($value) COMMENT \"对象所属工作空间\";\nDEFINE FIELD OVERWRITE identity ON TABLE entity TYPE record<identity>\n\tASSERT record::exists($value) COMMENT \"对象类型\";\nDEFINE FIELD OVERWRITE title ON TABLE entity TYPE string DEFAULT \"\" COMMENT \"对象标题\";\nDEFINE FIELD OVERWRITE content ON TABLE entity TYPE string DEFAULT \"\"  COMMENT \"对象内容\";\nDEFINE FIELD OVERWRITE created_at ON TABLE entity TYPE datetime READONLY DEFAULT time::now() COMMENT \"对象创建时间\";\nDEFINE FIELD OVERWRITE updated_at ON TABLE entity TYPE datetime DEFAULT time::now() COMMENT  \"对象更新时间\";\nDEFINE FIELD OVERWRITE creator ON TABLE entity TYPE record<account> READONLY DEFAULT $auth.id COMMENT \"对象创建者\";\nDEFINE FIELD OVERWRITE updater ON TABLE entity TYPE record<account> DEFAULT $auth.id COMMENT \"对象更新者\";\n\n\n-- 事件日志\nDEFINE TABLE OVERWRITE entity_event_log SCHEMAFULL TYPE NORMAL\n\tPERMISSIONS FOR select, create WHERE fn::get_current_workspace() == workspace\n\tCOMMENT \"实体时间记录\";\nDEFINE FIELD OVERWRITE workspace ON TABLE entity_event_log TYPE record<workspace>\n\tREADONLY DEFAULT fn::get_current_workspace()\n\tASSERT record::exists($value)\n\tCOMMENT \"事件所属工作空间\";\n\nDEFINE FIELD OVERWRITE slug ON TABLE entity_event_log TYPE string READONLY ASSERT string::is::ascii($value) COMMENT \"事件标识\";\nDEFINE FIELD OVERWRITE created_at ON TABLE entity_event_log TYPE datetime READONLY DEFAULT time::now() COMMENT \"创建时间\";\nDEFINE FIELD OVERWRITE payload ON TABLE entity_event_log FLEXIBLE TYPE object READONLY DEFAULT {} COMMENT \"事件数据\";\nDEFINE FIELD OVERWRITE entity ON TABLE entity_event_log TYPE record<entity> READONLY COMMENT \"事件对象\";\n\nDEFINE INDEX OVERWRITE slug_idx ON TABLE entity_event_log FIELDS slug COMMENT \"事件标识索引\";\nDEFINE EVENT OVERWRITE trigger_entity_update ON TABLE entity_event_log\n\tTHEN (\n\t\tUPDATE entity SET updated_at = time::now() WHERE id == $after.enitty\n\t)\n\tCOMMENT \"触发实体的更新\";\n\n\n-- 定义节点身份\nDEFINE TABLE OVERWRITE identity SCHEMAFULL TYPE NORMAL\n\tPERMISSIONS FOR select, update, delete, create WHERE fn::get_current_workspace() == workspace\n\tCOMMENT \"对象类型表\";\nDEFINE FIELD OVERWRITE workspace ON TABLE identity TYPE record<workspace>\n\tREADONLY DEFAULT fn::get_current_workspace()\n\tASSERT record::exists($value)\n\tCOMMENT \"对象所属工作空间\";\n\nDEFINE FIELD OVERWRITE slug ON TABLE identity TYPE string ASSERT string::is::ascii($value) COMMENT \"节点类型标识\";\nDEFINE FIELD OVERWRITE name ON TABLE identity TYPE string\tCOMMENT \"对象类型名称\";\nDEFINE FIELD OVERWRITE description ON TABLE identity TYPE string DEFAULT \"\"  COMMENT \"对象类型描述\";\nDEFINE INDEX OVERWRITE slug_uniq ON TABLE identity FIELDS workspace, slug UNIQUE COMMENT \"对象类型工作空间内名称唯一索引\";\n\n-- 定义对象关系\nDEFINE TABLE OVERWRITE relation SCHEMAFULL TYPE NORMAL\n\tPERMISSIONS FOR select, update, delete, create WHERE fn::get_current_workspace() == workspace\n\tCOMMENT \"对象关系表\";\nDEFINE FIELD OVERWRITE workspace ON TABLE relation TYPE record<workspace>\n\tREADONLY DEFAULT fn::get_current_workspace()\n\tASSERT record::exists($value) COMMENT \"对象关系所属工作空间\";\nDEFINE FIELD OVERWRITE slug ON TABLE relation TYPE string ASSERT string::is::ascii($value) COMMENT \"对象关系标识\";\nDEFINE FIELD OVERWRITE name ON TABLE relation TYPE string COMMENT \"对象关系名称\";\nDEFINE FIELD OVERWRITE description ON TABLE relation TYPE string DEFAULT \"\" COMMENT \"对象关系描述\";\nDEFINE FIELD OVERWRITE identities ON TABLE relation TYPE array<record<identity>> DEFAULT [] COMMENT \"允许的目标节点身份\";\nDEFINE INDEX OVERWRITE slug_uniq ON TABLE relation FIELDS workspace, slug UNIQUE;\n\nDEFINE EVENT OVERWRITE auto_delete_other_record ON TABLE relation\n    WHEN $event = \"DELETE\"\n\t\tTHEN {\n\t\t\tDELETE entity_relations WHERE relation = $before.id;\n\t\t}\n\t\tCOMMENT \"删除关系时触发\";\n\n\n-- 定义令牌\nDEFINE TABLE OVERWRITE token SCHEMAFULL TYPE NORMAL\n\tPERMISSIONS FOR select, update, delete, create\n\t\tWHERE account = $auth.id\n\tCOMMENT \"令牌表\";\nDEFINE FIELD OVERWRITE account ON TABLE token TYPE record<account>\n\tREADONLY DEFAULT $auth\n\tCOMMENT \"令牌拥有者\";\nDEFINE FIELD OVERWRITE workspace ON TABLE token TYPE record<workspace>\n\tDEFAULT fn::get_workspaces()[0]\n\tASSERT record::exists($value)\n\tCOMMENT \"令牌工作空间\";\nDEFINE FIELD OVERWRITE expire ON TABLE token TYPE datetime\n\tREADONLY DEFAULT time::from::unix($token.exp)\n\tCOMMENT \"令牌有效期\";\nDEFINE FIELD OVERWRITE revoked ON TABLE token TYPE bool\n\tDEFAULT false\n\tCOMMENT \"令牌是否已撤销\";\nDEFINE FIELD OVERWRITE last_used ON TABLE token TYPE datetime\n\tDEFAULT time::now()\n\tCOMMENT \"最后使用时间\";\nDEFINE FIELD OVERWRITE last_ip ON TABLE token TYPE option<string>\n\tDEFAULT NONE\n\tASSERT type::is::none($value) || string::is::ip($value)\n\tCOMMENT \"最后使用IP\";\nDEFINE FIELD OVERWRITE created_at ON TABLE token TYPE datetime READONLY DEFAULT time::now() COMMENT \"创建时间\";\n\nDEFINE FUNCTION OVERWRITE fn::get_token_record() {\n\tRETURN type::thing(\"token\", $token.jti);\n};\n\n\n-- 定义工作空间\nDEFINE TABLE OVERWRITE workspace SCHEMAFULL TYPE NORMAL\n\tPERMISSIONS\n\t\tFOR select WHERE array::find(fn::get_workspaces(), id)\n\t\tFOR create FULL\n\tCOMMENT \"工作空间表\";\nDEFINE FIELD OVERWRITE name ON TABLE workspace TYPE string COMMENT \"工作空间名称\";\nDEFINE FIELD OVERWRITE slug ON TABLE workspace TYPE string\n\tASSERT string::is::ascii($value) && string::len($value) >= 5\n\tCOMMENT \"工作空间标识\";\nDEFINE FIELD OVERWRITE description ON TABLE workspace TYPE string DEFAULT \"\" COMMENT \"工作空间描述\";\nDEFINE FIELD OVERWRITE config ON TABLE workspace FLEXIBLE TYPE object DEFAULT {} COMMENT \"工作空间配置项\";\nDEFINE FIELD OVERWRITE created_at ON TABLE workspace TYPE datetime READONLY DEFAULT time::now() COMMENT \"创建时间\";\n\nDEFINE INDEX OVERWRITE slug_uniq ON TABLE workspace FIELDS slug UNIQUE COMMENT \"工作空间标识唯一索引\";\n\nDEFINE EVENT OVERWRITE auto_create_indentity ON TABLE workspace\n    WHEN $event = \"CREATE\"\n\t\tTHEN {\n\t\t\tLET $ide = (CREATE ONLY identity CONTENT {\n\t\t\t\tworkspace: $after.id,\n\t\t\t\tslug: \"blank\",\n\t\t\t\tname: '空白',\n\t\t\t});\n\t\t\tUPDATE $after.id MERGE { config: { default_entity_identity: $ide.id,}, };\n\t\t}\n\t\tCOMMENT \"自动创建工作空间\";\n\nDEFINE EVENT OVERWRITE auto_delete_other_record ON TABLE workspace\n    WHEN $event = \"DELETE\"\n\t\tTHEN {\n\t\t\tDELETE entity WHERE workspace = $before.id;\n\t\t\tDELETE attribute WHERE workspace = $before.id;\n\t\t\tDELETE relation WHERE workspace = $before.id;\n\t\t}\n\t\tCOMMENT \"删除工作空间时触发\";\n\nDEFINE FUNCTION OVERWRITE fn::get_workspaces() {\n\tRETURN (SELECT <-workspace_members<-workspace as wss FROM $auth.id )[0].wss || []\n} COMMENT \"获取当前用户的所有的工作空间\" PERMISSIONS FULL;\n\n\n-- 获取当前工作空间\nDEFINE FUNCTION OVERWRITE fn::get_current_workspace() {\n\tLET $tokenRecord = fn::get_token_record();\n\tRETURN $tokenRecord.workspace;\n} COMMENT \"获取当前工作空间\" PERMISSIONS FULL;\n\n-- 富实体\nDEFINE TABLE OVERWRITE rich_entity  TYPE NORMAL\n\tAS SELECT\n\t\t*\n\t\t,id as entity_id\n\t\t,->entity_attributes.{id,out,data} as attributes\n\t\t,->entity_relations.{id,out,relation} as relations\n\t\t,(SELECT slug,payload,created_at FROM entity_event_log WHERE entity == $parent.id) as event_logs\n\n\t\tFROM entity\n\tPERMISSIONS\n\t\tFOR select WHERE fn::get_current_workspace() == workspace\n\tCOMMENT \"富节点表\";\n\n-- 待办事项\nDEFINE TABLE OVERWRITE todo_item  TYPE NORMAL\n\tAS SELECT\n\t\t-- entity attrs\n\t\ttitle\n\t\t, content\n\t\t, created_at\n\t\t, updated_at\n\t\t, creator\n\t\t, updater\n\t\t, workspace\n\t\t-- rich_entity attrs\n\t\t, entity_id\n\n\t\t, attributes.find(|$attr| $attr.out.slug == \"done\").data ?? false as done\n\t\t, attributes.find(|$attr| $attr.out.slug == \"done_time\").data ?? null as done_time\n\t\t, attributes.find(|$attr| $attr.out.slug == \"priority\").data ?? null as priority\n\t\t, fn::priority_to_order(attributes.find(|$attr| $attr.out.slug == \"priority\").data ?? null) as priority_order\n\t\t, attributes.find(|$attr| $attr.out.slug == \"scheduled_start\").data ?? null as scheduled_start\n\t\t, attributes.find(|$attr| $attr.out.slug == \"scheduled_end\").data ?? null as scheduled_end\n\t\t, attributes.find(|$attr| $attr.out.slug == \"deadline\").data ?? null as deadline\n\t\t, relations.filter(|$rel| $rel.relation.slug == \"belong_to_todo_list\").map(|$rel| $rel.out).{id,title} as belong_to\n\t\tFROM rich_entity WHERE identity.slug = \"todo_item\"\n\tPERMISSIONS\n\t\tFOR select WHERE fn::get_current_workspace() == workspace\n\tCOMMENT \"待办事项\";\n\nDEFINE FUNCTION OVERWRITE fn::priority_to_order($priority: string | null) {\n\tIF ($priority == \"高\") {\n\t\tRETURN 3;\n\t} ELSE IF ($priority == \"中\") {\n\t\tRETURN 2;\n\t} ELSE IF ($priority == \"低\") {\n\t\tRETURN 1;\n\t} ELSE {\n\t\tRETURN 0;\n\t}\n}\nCOMMENT \"待办事项优先级排序\" PERMISSIONS NONE;\n\n-- Todo List\nDEFINE TABLE OVERWRITE todo_list  TYPE NORMAL\n\tAS SELECT * FROM rich_entity WHERE identity.slug = \"todo_list\"\n\tPERMISSIONS\n\t\tFOR select WHERE fn::get_current_workspace() == workspace\n\tCOMMENT \"待办清单\";\n","events":""}